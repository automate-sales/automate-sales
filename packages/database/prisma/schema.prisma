// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ContactStatus {
  lead
  contacted
  prospect
  quote_generated
  negotiation
  customer
  loyalty
  deferred
}

enum ContactSource {
  whatsapp
  iphone
  wave
  instagram
  phone
  website
  quickbooks
  other
  store
}



model Contact {
  id              String         @id @default(cuid())
  
  contact_source  ContactSource? @default(whatsapp)
  source_id     String? @unique
  source_name   String?
  
  monday_id       String? @unique
  contact_status  ContactStatus? @default(lead)
  phone_number    String?

  name            String?
  email           String?
  nationality     String?
  legal_id          String?
  gender          String?
  birthdate        DateTime?
  company_name    String?
  job_title  String?
  interests       String[]
  address         String?
  country        String?

  profile_picture String?
  last_chat_date  DateTime?
  last_chat_text  String?
  agent           Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  createdBy       String?
  updatedBy       String?
  chats           Chat[]
}

enum ChatStatus {
  new
  pending
  sent
  delivered
  read
  received
  failed
}

enum Direction {
  incoming
  outgoing
}

enum ChatType {
  text
  link
  template
  audio
  image
  video
  document
  contact
  contacts
  location
  sticker
  media
  other
  reply
  quick_reply

  share
  story_mention
}

enum Sentiment {
  positive
  negative
  neutral
}

enum ChatSource {
  whatsapp
  instagram
}

model Chat {
  id            Int     @id @default(autoincrement())
  
  chat_source   ChatSource? @default(whatsapp)
  source_id   String? @unique
  
  monday_id     String? @unique
  contact_id    String
  contact       Contact @relation(fields: [contact_id], references: [id])
  name          String?
  status        ChatStatus @default(new)
  direction     Direction?
  type          ChatType?
  text          String?
  media         String?
  location      Json?
  link          Json?
  contact_object Json?
  template_id   Int?
  template      Template?   @relation(fields: [template_id], references: [id])
  phone_number  String?
  language      String?
  sentiment     Sentiment?
  insights      String[]    @default([])
  responded     Boolean     @default(false)
  responded_by  String?
  seen_by       Json?  
  response_time Int?
  respondedAt  DateTime?
  chatDate      DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String?
  updatedBy     String?
}

enum TemplateStatus {
  approved
  rejected
  submitted
}

enum Language {
  en
  es
}

model Template {
  id              Int             @id @default(autoincrement())
  meta_id         String?
  monday_id       String?
  name            String?
  template_status TemplateStatus?
  language        Language?
  variables       String[]        @default([])
  body            String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  createdBy       String?
  updatedBy       String?
  chats           Chat[]
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
